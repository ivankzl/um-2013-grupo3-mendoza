/**
 * $Author:  $
 * 
 * Revision History
 * $Log: UsuarioDominio.java,v $ *
 *
 */
package ar.edu.um.dominio;

import java.util.ArrayList;
import java.util.List;

import ar.edu.um.dao.UsuarioDao;
import ar.edu.um.entidad.Usuario;
import ar.edu.um.util.PersistenceUtil;

/**
 * UsuarioDominio ofrece los métodos para manejar usuarios
 * 
 * $Id: $
 * 
 */
public class UsuarioDominio {
	
    /**
     * crearUsuario: Crea usuarios en la DB
     * 
     * @param Usuario
     *            - Usuario a crear
     * 
     */
	public void crearUsuario(Usuario usuario){
		UsuarioDao usuarioDao = new UsuarioDao(PersistenceUtil.getEntityManager());
		usuarioDao.persist(usuario);
	}
	
    /**
     * verUsuario: Muestra un usuario de la DB
     * 
     * @param Integer
     *            - Id del usuario a mostrar
     * @return Usuario
     * 			  - Usuario encontrado - Null si no se encontró ninguno
     * 
     */
	public Usuario verUsuario(Integer id){
		Usuario usuario = null;
		UsuarioDao usuarioDao = new UsuarioDao(PersistenceUtil.getEntityManager());
		usuarioDao.findById(id);
		return usuario;
	}
	
	/**
     * modificarUsuario: Modifica usuarios en la DB
     * 
     * @param Usuario
     *            - Usuario a modificar
     * 
     */
	public void modificarUsuario(Usuario usuario){
		UsuarioDao usuarioDao = new UsuarioDao(PersistenceUtil.getEntityManager());
		usuarioDao.merge(usuario);		
	}
	
	/**
     * eliminarUsuario: Elimina usuarios en la DB
     * 
     * @param Usuario
     *            - Usuario a eliminar
     * 
     */	
	public void eliminarUsuario (Usuario usuario){
		UsuarioDao usuarioDao = new UsuarioDao(PersistenceUtil.getEntityManager());
		usuarioDao.remove(usuario);
	}
	
    /**
     * consultarSeguidores: Muestra los seguidores de un usuario
     * 
     * @param Usuario
     *            - Usuario sobre el que se desean ver los seguidores
     * @return List<Usuario>
     * 			  - Lista de usuarios seguidores
     * 
     */
	public List<Usuario> consultarSeguidores(Usuario usuario){
		ArrayList<Usuario> seguidores = null;
		UsuarioDao usuarioDao = new UsuarioDao(PersistenceUtil.getEntityManager());
		
		return seguidores;
	}
	
    /**
     * consultarSeguidos: Muestra los seguidos de un usuario
     * 
     * @param Usuario
     *            - Usuario sobre el que se desean ver los seguidos
     * @return List<Usuario>
     * 			  - Lista de usuarios seguidos
     * 
     */
	public List<Usuario> consultarSeguidos(Usuario usuario){
		ArrayList<Usuario> seguidos = null;
		UsuarioDao usuarioDao = new UsuarioDao(PersistenceUtil.getEntityManager());
		
		return seguidos;
	}
	
	/**
     * buscarUsuarioPorNombre: Busca un usuario por nombre
     * 
     * @param String
     *            - Nombre del usuario a buscar
     * @return Usuario
     *            - Usuario encontrado - Null si no se encontró ninguno
     * 
     */	
	public Usuario buscarUsuarioPorNombre(String name){
		Usuario usuario = null;
		
		return usuario;
	}
	
	/**
     * dejarDeSeguirUsuario: Saca un usuario de la lista de usuarios seguidos
     * 
     * @param Usuario
     *            - Usuario que realizó la acción
     * @param Usuario
     *            - Usuario a dejar de seguir
     * 
     */	
	public void dejarDeSeguirUsuario(Usuario usuarioActual, Usuario usuarioDejarDeSeguir){
		
	}

	/**
     * cerrarSesion: Saca un usuario de la lista de sesiones activas
     * 
     * @param Usuario
     *            - Usuario que realizó la acción
     */	
	public void cerrarSesion(Usuario usuario){
		
	}
	
	/**
     * iniciarSesion: Loguea un usuario en el sistema
     * 
     * @param Usuario
     *            - Usuario que realizó la acción
     */	
	public boolean iniciarSesion(Usuario usuario){
		UsuarioDao usuarioDao = new UsuarioDao(PersistenceUtil.getEntityManager());
		boolean loguinCorrecto = false;
		loguinCorrecto = usuarioDao.iniciarSesion(usuario.getNombreUsuario(), usuario.getClave());
		return loguinCorrecto;
	}
}
